import java.time.LocalDateTime

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'checkstyle'
    id 'jacoco'
    id 'io.spring.javaformat' version '0.0.41'
    id 'com.google.cloud.tools.jib' version "3.4.2"
}

checkstyle {
    toolVersion = "9.3"
}

jacoco {
    // JaCoCo 버전
    toolVersion = "0.8.11"

    // 테스트결과 리포트를 저장할 경로 변경
    reportsDirectory = layout.buildDirectory.dir('jacocoReportDir')
}

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        // awspring BOM 가져오기
        mavenBom 'io.awspring.cloud:spring-cloud-aws-dependencies:3.1.1'
    }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testAndDevelopmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    checkstyle 'io.spring.javaformat:spring-javaformat-checkstyle:0.0.41'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport' // test 이후 jacocoTestReport 실행
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

jacocoTestReport {
    dependsOn test // test task 가 성공해야만 실행된다.
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
    // 어차피 CI에서 검사할꺼라 해당 Task는 필요없음
    // jacocoTestReport 이후 jacocoTestCoverageVerification 실행
    //finalizedBy 'jacocoTestCoverageVerification'
}
//
//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            // TODO rule, limit 추가하기.
//            limit {
//            }
//        }
//    }
//}

group = 'dev.sijun-yang'
// 따로 버전 관리는 안함, 도커로 빌드해서 사용하고 시간 기준으로 알아서 관리
//version = '0.0.1-SNAPSHOT'

jib {
    from {
        // openjdk 이미지는 더 이상 관리 되지 않으므로 amazoncorretto를 사용
        image = 'amazoncorretto:17-alpine-jdk'
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }

        to {
            // 주소 뒤에 사용할 이미지 이름을 작성해야 동작한다. 이름 자체는 뭘 하든 상관 없다.
            // ex: image = '<name>.kr.ncr.ntruss.com/<이미지 이름>'
            /*
            image registry 위치는 system properties를 사용해서 CD 스크립트에서 주입해 줄 예정
            참고: https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#system-properties
             */
            // version과 tags에 작성한 tags 로 이미지를 배포. 예시: celog-server:v_20240412113205, celog-server:latest
            version = 'latest'
            tags = ['v_' + LocalDateTime.now().format("yyyyMMddhhmmss")]
            auth {
                // username & password 도 마찬가지로 CD 스크립트에서 주입
            }
        }
        container {
            // 컨테이너 실행 시, run -e SPRING_ACTIVE_PROFILE=OOO 처럼 사용해서 profile 주입 가능
            jvmFlags = ['-Dspring.profiles.active=${SPRING_ACTIVE_PROFILE}']
            ports = ['8080/tcp', '3306/tcp']
        }

    }
}


// 커밋 컨벤션을 지키기 위한 commit-msg 스크립트를 local git hook에 적용하는 task
// 새로운 환경에서 프로젝트를 열었을 때, commit-msg 스크립트를 적용하기 위해서 사용해야 함
tasks.register("addLocalGitHook") {
    println("Running Add commit-msg Git Hook Script on Build")
    exec {
        commandLine("cp", "${rootDir}/.github/hooks/commit-msg", "${rootDir}/.git/hooks/commit-msg")
    }
    exec {
        commandLine("chmod", "+x", "${rootDir}/.git/hooks/commit-msg")
    }
    println("Added commit-msg Git Hook Script.")
}
